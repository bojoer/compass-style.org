<h1>Sass Pixelations</h1>
<p id="description">
Below there are ten thousand DOM elements laid out in a 100 by 100 pixel grid.<br/>
This area has been styled with CSS generated from a Sass Stylesheet.
</p>

<div id="pixelation">
<h2><%= @stylesheet.title %></h2>
<div id="pixel-info" style="display: none;">
</div>
<div id="container">
  <p id="please-wait">
    Rendering Pixels.<br/>
    Please Wait.
  </p>
<div id="pixels0" class="pixelated" style="display:none;">
</div>
<div id="pixels1" class="pixelated" style="display:none;">
</div>
<div id="pixels2" class="pixelated" style="display:none;">
</div>
<div id="pixels3" class="pixelated" style="display:none;">
</div>
</div>
</div>

<div id="make-your-own">
<h2>Stylesheet for this Pixelation</h2>
<p>Feel free to edit it and see the changes</p>
<textarea id="stylesheet">
<%= @stylesheet.sass %>
</textarea>
<div id="error"></div>
</div>

<script type="text/javascript">
  function updatePixelationStyles(transport) {
    setInnerText($('pixelation-styles'), transport.responseText);
    clearCompilationError();
  }

  function clearCompilationError() {
    $('error').removeClassName("active");
    setInnerText($('error'), "");      
  }
  function displayCompilationError(transport) {
    setInnerText($('error'), "Syntax Error: "+transport.responseText);  
    $('error').addClassName("active");
  }
  new Form.Element.Observer('stylesheet', 1, function(element, value) {
    new Ajax.Request(<%= compile_pixelations_stylesheets_path.to_json %>, {
      parameters : 'sass='+escape(value),
      onSuccess : updatePixelationStyles,
      on400 : displayCompilationError
    })
  });

  function setInnerText(element, value) {
    if (element['innerText']) {
      element.innerText = value;
    } else {
      element.textContent = value;
    }    
  }

  function render_pixels() {
    render_line.defer($('pixels0'), 0, 25)
    render_line.defer($('pixels1'), 25, 50)
    render_line.defer($('pixels2'), 50, 75)
    render_line.defer($('pixels3'), 75, 100)
  }
  function mouse_over_pixel(event) {
    var info = $('pixel-info');
    info.style.display = "block";
    var information = event.element().inspect();
    setInnerText(info, information)
  }
  function hide_pixel_info(event) {
    $('pixel-info').hide();
  }
  function attach_hover_behavior() {
    $$('.pixelated').each(function(e){
      e.observe('mouseover', mouse_over_pixel)
      e.observe('mouseout', hide_pixel_info)
    });
  }
  function render_line(container, line_number, last_line_number) {
    html = "";
    for (var x = 0; x < <%= @width %>; x++) {
      html += '<p class="x-' + x + ' y-' + line_number + '" />'
    }    
    container.insert(html, {position : 'bottom'})
    if (line_number + 1 < last_line_number) {
      render_line.defer(container, line_number + 1, last_line_number)
    } else if (last_line_number == 100) {
      $('please-wait').hide();
      $$('.pixelated').each(function(e){
        e.show();
      });
      attach_hover_behavior.defer();
    }
  }
  window.onload = render_pixels;
</script>
